// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyVideoResume.Data;

#nullable disable

namespace MyVideoResume.Data.Migrations.MyVideoResume
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Award", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Awarder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Award", t =>
                        {
                            t.HasTrigger("Award_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Basics", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Basics", t =>
                        {
                            t.HasTrigger("Basics_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Certificate", t =>
                        {
                            t.HasTrigger("Certificate_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Education", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Courses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Score")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Education", t =>
                        {
                            t.HasTrigger("Education_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Interest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Interest", t =>
                        {
                            t.HasTrigger("Interest_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.LanguageItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fluency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("LanguageItem", t =>
                        {
                            t.HasTrigger("LanguageItem_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location", t =>
                        {
                            t.HasTrigger("Location_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Project", t =>
                        {
                            t.HasTrigger("Project_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Publication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Publication", t =>
                        {
                            t.HasTrigger("Publication_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.ReferenceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("ReferenceItem", t =>
                        {
                            t.HasTrigger("ReferenceItem_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Skill", t =>
                        {
                            t.HasTrigger("Skill_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Volunteer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Volunteer", t =>
                        {
                            t.HasTrigger("Volunteer_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Work", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Highlights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MetaResumeEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MetaResumeEntityId");

                    b.ToTable("Work", t =>
                        {
                            t.HasTrigger("Work_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Latitude")
                        .HasColumnType("int");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Longitude")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Addresses", t =>
                        {
                            t.HasTrigger("Addresses_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Business.CompanyProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ApprovedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MailingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TermsOfUseAgreementAcceptedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("TermsOfUserAgreementVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("MailingAddressId");

                    b.ToTable("Companies", t =>
                        {
                            t.HasTrigger("Companies_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.JobPreferencesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Industry")
                        .HasColumnType("int");

                    b.Property<float>("MinimumSalary")
                        .HasColumnType("real");

                    b.Property<int>("PaySchedule")
                        .HasColumnType("int");

                    b.Property<int>("Seniority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("WorkSetting")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobPreferences", t =>
                        {
                            t.HasTrigger("JobPreferences_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Jobs.ApplicantToJobEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobApplicationStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MatchResults")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MatchResultsDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("MatchScoreRating")
                        .HasColumnType("real");

                    b.Property<Guid>("ResumeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserApplyingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ResumeItemId");

                    b.HasIndex("UserApplyingId");

                    b.ToTable("ApplicantToJob", t =>
                        {
                            t.HasTrigger("ApplicantToJob_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Jobs.BonusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BonusFrequency")
                        .HasColumnType("int");

                    b.Property<int>("BonusType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bonus", t =>
                        {
                            t.HasTrigger("Bonus_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Jobs.EquityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquityType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equity", t =>
                        {
                            t.HasTrigger("Equity_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Jobs.JobItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BonusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HiringTarget")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalaryId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("Seniority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSetting")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BonusId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EquityId");

                    b.HasIndex("SalaryId");

                    b.ToTable("Jobs", t =>
                        {
                            t.HasTrigger("Jobs_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Jobs.SalaryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("MaximumSalary")
                        .HasColumnType("real");

                    b.Property<float>("MinimumSalary")
                        .HasColumnType("real");

                    b.Property<int>("PaySchedule")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Salary", t =>
                        {
                            t.HasTrigger("Salary_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.MetaDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MetaType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResumeInformationEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeInformationEntityId");

                    b.ToTable("MetaData", t =>
                        {
                            t.HasTrigger("MetaData_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.MetaResumeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Resume")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BasicsId");

                    b.HasIndex("Resume")
                        .IsUnique()
                        .HasFilter("[Resume] IS NOT NULL");

                    b.ToTable("MetaResumes", t =>
                        {
                            t.HasTrigger("MetaResumes_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.ResumeInformationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Industry")
                        .HasColumnType("int");

                    b.Property<float>("MinimumSalary")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaySchedule")
                        .HasColumnType("int");

                    b.Property<int>("Privacy_ShowContactDetails")
                        .HasColumnType("int");

                    b.Property<int>("Privacy_ShowResume")
                        .HasColumnType("int");

                    b.Property<string>("ResumeSerialized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResumeTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ResumeType")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResumeTemplateId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ResumeInformation", t =>
                        {
                            t.HasTrigger("ResumeInformation_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.ResumeTemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Namespace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransformerComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResumeTemplates", t =>
                        {
                            t.HasTrigger("ResumeTemplates_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.UserProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPreferencesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MailingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("JobPreferencesId");

                    b.HasIndex("MailingAddressId");

                    b.ToTable("UserProfiles", t =>
                        {
                            t.HasTrigger("UserProfiles_Trigger");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Award", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Awards")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Basics", b =>
                {
                    b.HasOne("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Certificate", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Certificates")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Education", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Education")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Interest", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Interests")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.LanguageItem", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Languages")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Project", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Projects")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Publication", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Publications")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.ReferenceItem", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("References")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Skill", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Skills")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Volunteer", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Volunteer")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Work", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.MetaResumeEntity", null)
                        .WithMany("Work")
                        .HasForeignKey("MetaResumeEntityId");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Business.CompanyProfileEntity", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.AddressEntity", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("MyVideoResume.Data.Models.AddressEntity", "MailingAddress")
                        .WithMany()
                        .HasForeignKey("MailingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("MailingAddress");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Jobs.ApplicantToJobEntity", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Jobs.JobItemEntity", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyVideoResume.Data.Models.Resume.ResumeInformationEntity", "ResumeItem")
                        .WithMany()
                        .HasForeignKey("ResumeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyVideoResume.Data.Models.UserProfileEntity", "UserApplying")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserApplyingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("ResumeItem");

                    b.Navigation("UserApplying");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Jobs.JobItemEntity", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyVideoResume.Data.Models.Jobs.BonusEntity", "Bonus")
                        .WithMany()
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyVideoResume.Data.Models.Business.CompanyProfileEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyVideoResume.Data.Models.Jobs.EquityEntity", "Equity")
                        .WithMany()
                        .HasForeignKey("EquityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyVideoResume.Data.Models.Jobs.SalaryEntity", "Salary")
                        .WithMany()
                        .HasForeignKey("SalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Bonus");

                    b.Navigation("Company");

                    b.Navigation("Equity");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.MetaDataEntity", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.ResumeInformationEntity", null)
                        .WithMany("MetaData")
                        .HasForeignKey("ResumeInformationEntityId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.MetaResumeEntity", b =>
                {
                    b.HasOne("MyVideoResume.Abstractions.Resume.Formats.JSONResumeFormat.Basics", "Basics")
                        .WithMany()
                        .HasForeignKey("BasicsId");

                    b.HasOne("MyVideoResume.Data.Models.Resume.ResumeInformationEntity", "ResumeInformation")
                        .WithOne("MetaResume")
                        .HasForeignKey("MyVideoResume.Data.Models.Resume.MetaResumeEntity", "Resume")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Basics");

                    b.Navigation("ResumeInformation");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.ResumeInformationEntity", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.Resume.ResumeTemplateEntity", "ResumeTemplate")
                        .WithMany()
                        .HasForeignKey("ResumeTemplateId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyVideoResume.Data.Models.UserProfileEntity", "UserProfile")
                        .WithMany("ResumeItems")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ResumeTemplate");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.UserProfileEntity", b =>
                {
                    b.HasOne("MyVideoResume.Data.Models.AddressEntity", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MyVideoResume.Data.Models.JobPreferencesEntity", "JobPreferences")
                        .WithMany()
                        .HasForeignKey("JobPreferencesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyVideoResume.Data.Models.AddressEntity", "MailingAddress")
                        .WithMany()
                        .HasForeignKey("MailingAddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BillingAddress");

                    b.Navigation("JobPreferences");

                    b.Navigation("MailingAddress");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.MetaResumeEntity", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Certificates");

                    b.Navigation("Education");

                    b.Navigation("Interests");

                    b.Navigation("Languages");

                    b.Navigation("Projects");

                    b.Navigation("Publications");

                    b.Navigation("References");

                    b.Navigation("Skills");

                    b.Navigation("Volunteer");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.Resume.ResumeInformationEntity", b =>
                {
                    b.Navigation("MetaData");

                    b.Navigation("MetaResume")
                        .IsRequired();
                });

            modelBuilder.Entity("MyVideoResume.Data.Models.UserProfileEntity", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("ResumeItems");
                });
#pragma warning restore 612, 618
        }
    }
}
